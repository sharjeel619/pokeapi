[{"C:\\Projects\\Pokemon\\src\\pages\\Home\\index.js":"1","C:\\Projects\\Pokemon\\src\\index.js":"2","C:\\Projects\\Pokemon\\src\\reportWebVitals.js":"3","C:\\Projects\\Pokemon\\src\\components\\PokemonCard\\index.js":"4","C:\\Projects\\Pokemon\\src\\components\\EvolutionInfo\\index.js":"5","C:\\Projects\\Pokemon\\src\\services\\api.js":"6"},{"size":7078,"mtime":1608915618223,"results":"7","hashOfConfig":"8"},{"size":521,"mtime":1608119946778,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1608113439205,"results":"10","hashOfConfig":"8"},{"size":1154,"mtime":1608229291421,"results":"11","hashOfConfig":"8"},{"size":4495,"mtime":1609159882278,"results":"12","hashOfConfig":"8"},{"size":1900,"mtime":1608216521043,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"qa6apt",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Projects\\Pokemon\\src\\pages\\Home\\index.js",["29"],"import React, {\r\n  Component,\r\n  Suspense, \r\n  lazy\r\n} from 'react';\r\nimport './index.scss';\r\nimport Logo from '../../assets/images/logo1.png';\r\nimport Loader from '../../assets/images/loader.svg';\r\nimport PokemonAPI from '../../services/api';\r\nconst PokemonCard = lazy(() => import(\"../../components/PokemonCard\"));\r\nconst EvolutionInfo = lazy(() => import(\"../../components/EvolutionInfo\"));\r\nexport default class Home extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      pokemonList: [],\r\n      pokemonInfo: [],\r\n      showList: true,\r\n      showLoader: true,\r\n      selectedPokemon: null\r\n    }\r\n    this.evolutionData = []\r\n    this.evolutionLevel = 1\r\n    this.totalPokemonCount = 0\r\n    this.apiOffset = 0\r\n    this.apiLimit = 150\r\n    this.observer = null\r\n    this.loaderRef = null\r\n    this.observerOptions = {\r\n      root: null,\r\n      rootMargin: \"50px\",\r\n      threshold: .1,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchPokemonList()\r\n    this.bindInfiniteScroll()\r\n  }\r\n\r\n  bindInfiniteScroll = () => {\r\n    this.observer = new IntersectionObserver(\r\n      this.observerCallBack,\r\n      this.observerOptions\r\n    )\r\n    this.observer.observe(this.loaderRef)\r\n  }\r\n\r\n  observerCallBack = (elements) => {\r\n    const {isIntersecting} = elements[0]\r\n    const {pokemonList, showList, showLoader} = this.state\r\n    if (!showList || showLoader || !isIntersecting || !pokemonList.length || this.apiOffset >= this.totalPokemonCount) return\r\n    this.setState({\r\n      showLoader: true\r\n    })\r\n    this.fetchPokemonList()\r\n  }\r\n\r\n  fetchPokemonList = async () => {\r\n    let pokemonData = await PokemonAPI.getPokemonList(this.apiOffset, this.apiLimit)\r\n    this.totalPokemonCount = pokemonData.count\r\n    if (!pokemonData || !pokemonData.results || !pokemonData.results.length) return\r\n\r\n    pokemonData = pokemonData.results\r\n    let data = await Promise.all(pokemonData.map((item) => PokemonAPI.getPokemonInfoByUrl(item.url)))\r\n    data = data.map((item) => {\r\n      let {stats, sprites} = item\r\n      stats = stats.map((stat) => ({name: stat.stat.name, value: stat.base_stat}))\r\n      let main_img = sprites.other['official-artwork'].front_default || sprites.other['dream_world'].front_default\r\n      return {...item, main_img, stats: stats}\r\n    })\r\n    this.apiOffset = this.apiOffset + this.apiLimit\r\n    this.setState((state) => ({\r\n      pokemonList: [...state.pokemonList, ...data],\r\n      showLoader: false\r\n    }))\r\n  }\r\n\r\n  // calculatePokemonChain = async (chainData) => {\r\n  //   // Could just only iterate up to 3 levels\r\n  //   if (!chainData.length) return\r\n  //   this.evolutionLevel++\r\n  //   var tempList = []\r\n  //   chainData.forEach(async (item, index) => {\r\n  //     let {species} = item\r\n  //     let pokemonId = species.url.split(\"pokemon-species\")[1].replace(/\\//g, '')\r\n  //     pokemonId = Number(pokemonId)\r\n  //     let findData = this.state.pokemonList.find(item => item.id === pokemonId)\r\n  //     tempList.push({missingInfoPokeId: !findData ? pokemonId : 0, ...findData})\r\n  //     if (index === chainData.length - 1) {\r\n  //       this.evolutionData.push({pokemonData: [...tempList], level: this.evolutionLevel,  missingInfoPokeId: !findData ? pokemonId : 0})\r\n  //       return this.calculatePokemonChain(item.evolves_to)\r\n  //     }\r\n  //   })\r\n  // }\r\n\r\n  // capitalizeWord = (word) => {\r\n  //   return word.charAt(0).toUpperCase() + word.slice(1)\r\n  // }\r\n\r\n  // onPokemonCardClick = async (e, data) => {\r\n  //   this.setState({\r\n  //     showList: false,\r\n  //     showLoader: true\r\n  //   })\r\n  //   let speciesData = await PokemonAPI.getPokemonSpeciesByUrl(data.species.url)\r\n  //   let evolutionChainData = await PokemonAPI.getPokemonEvolutionChainByUrl(speciesData.evolution_chain.url)\r\n  //   this.selectedPokemon = `Evolution Chain for ${this.capitalizeWord(data.name)}`\r\n  //   const {chain} = evolutionChainData\r\n  //   let pokemonId = chain.species.url.split(\"pokemon-species\")[1].replace(/\\//g, '')\r\n  //   pokemonId = Number(pokemonId)\r\n  //   // wobbuffet exception, use loop to find pokemon data through api call that are not in the list.\r\n  //   let findData = this.state.pokemonList.find(item => item.id === pokemonId)\r\n  //   this.evolutionData.push({pokemonData: [{missingInfoPokeId: !findData ? pokemonId : 0, ...findData}], missingInfoPokeId: !findData ? pokemonId : 0, level: this.evolutionLevel})\r\n  //   this.calculatePokemonChain(chain.evolves_to)\r\n  //   console.log(this.evolutionData)\r\n  //   for (let i = 0; i < this.evolutionData.length; i++) {\r\n  //     if (this.evolutionData[i].missingInfoPokeId === 0) continue\r\n  //     await new Promise((resolve) => {\r\n  //       let item = this.evolutionData[i]\r\n  //       item.pokemonData.forEach(async (item1, index1, arr1) => {\r\n  //         if (item1.missingInfoPokeId === 0) return\r\n  //         console.log(`Calling API count: ${index1}`)\r\n  //         let fData = await PokemonAPI.getPokemonInfoById(item1.missingInfoPokeId)\r\n  //         fData.main_img = fData.sprites.other['official-artwork'].front_default || fData.sprites.other.dream_world.front_default\r\n  //         arr1[index1] = {...item1, ...fData}\r\n  //         resolve()\r\n  //       })\r\n  //     })\r\n  //   }\r\n  //   console.log(`Done`)\r\n  //   this.setState({\r\n  //     pokemonInfo: [...this.evolutionData],\r\n  //     showLoader: false\r\n  //   })\r\n  // }\r\n\r\n  // showListFunc = () => {\r\n  //   this.evolutionData = []\r\n  //   this.evolutionLevel = 1\r\n  //   this.setState({\r\n  //     showList: true\r\n  //   })\r\n  // }\r\n\r\n  hideEvolutionInfo = () => {\r\n    this.setState({\r\n      showList: true,\r\n      showLoader: false\r\n    })\r\n  }\r\n\r\n  onPokemonCardClick = async (e, data) => {\r\n    this.setState({\r\n      selectedPokemon: data,\r\n      showLoader: true,\r\n      showList: false\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const {pokemonList, showList, showLoader, pokemonInfo, selectedPokemon} = this.state\r\n    return (\r\n      <div className=\"home-page\">\r\n        <div className=\"banner\">\r\n          <img src={Logo} lazy=\"true\" alt=\"Banner Img\"/>\r\n        </div>\r\n        <div className=\"pokemon-list-container\" style={{display: showList ? 'block' : 'none'}}>\r\n          <h1> Choose a Pokemon to see its Evolution Chain </h1>\r\n          <div className=\"pokemon-list\">\r\n            { \r\n              pokemonList.map((item, index) => (\r\n                <Suspense key={item.id} fallback={<div></div>}>\r\n                  <PokemonCard pokeData={item} onCardClick={(e) => this.onPokemonCardClick(e, item)} />\r\n                </Suspense>\r\n              ))\r\n            }\r\n          </div>\r\n        </div>\r\n        <div>\r\n          { !showList && <Suspense fallback={<div></div>}>\r\n              <EvolutionInfo pokemonList={pokemonList} evolutionData={selectedPokemon} hideEvolutionInfo={this.hideEvolutionInfo} />\r\n            </Suspense>\r\n          }\r\n        </div>\r\n        <div className=\"loader\" ref={e => this.loaderRef = e}>\r\n          <img src={Loader} alt=\"Loader\" style={{display: showLoader ? 'block' : 'none'}} />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Projects\\Pokemon\\src\\index.js",[],["30","31"],"C:\\Projects\\Pokemon\\src\\reportWebVitals.js",[],["32","33"],"C:\\Projects\\Pokemon\\src\\components\\PokemonCard\\index.js",[],"C:\\Projects\\Pokemon\\src\\components\\EvolutionInfo\\index.js",[],"C:\\Projects\\Pokemon\\src\\services\\api.js",[],{"ruleId":"34","severity":1,"message":"35","line":162,"column":47,"nodeType":"36","messageId":"37","endLine":162,"endColumn":58},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"38","replacedBy":"42"},{"ruleId":"40","replacedBy":"43"},"no-unused-vars","'pokemonInfo' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["44"],"no-negated-in-lhs",["45"],["44"],["45"],"no-global-assign","no-unsafe-negation"]